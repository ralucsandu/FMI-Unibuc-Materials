#14. Functie ce primeste ca parametri prin stiva adresa unui vector de
#intregi si lungimea sa n (intreg) si: daca n este impar, returneaza in
#$v0 elementul de pe pozitia (n-1)/2, iar daca n este par, returneaza in
#$v0 suma elementelor aflate pe pozitiile (n-2)/2 si n/2; presupunem ca
#pozitiile sunt de la 0 la n-1 iar n>=1.
#Functia isi va accesa parametrii cu $fp iar apelurile vor respecta conventiile
#MIPS si C (privind cadrul de apel, $fp, registrii salvati de apelant si apelat,
#etc.).
#Program care apeleaza functia cu niste parametri fixati si afisaza mesajul (cu
#"syscall") "mai mare" sau "mai mic" dupa cum valoarea returnata este >10 sau nu.

.data
	arr: .word 2 8 15 2 3 4 
	n: .word 6
	mare: .asciiz "mai mare"
	mic: .asciiz "mai mic"

.text

procedura:
	subu $sp, $sp, 4
	sw $fp, 0($sp)
	addiu $fp, $sp, 0
	subu $sp, $sp, 8
	sw $s0, 4($sp)
	sw $s1, 0($sp)
	#$sp: ($s1 v)($s0 v)$fp:(%fp v)(arr)(n)
	lw $s0, 4($fp)
	lw $s1, 8($fp)
	div $t0, $s1, 2
	mfhi $t0
	beq $t0, 1, impar
	beq $t0, 0, par

impar:
	move $t1, $s1
	subu $t1, $t1, 1
	div $t1, $t1, 2
	mflo $t1
	j cauta_impar

cauta_impar:
	beqz $t1, gasit_impar
	subu $t1, $t1, 1
	addiu $s0, $s0, 4
	b cauta_impar

gasit_impar:
	lw $v0, 0($s0)
	j exit

par:
	move $t1, $s1
	subu $t1, $t1, 2
	div $t1, $t1, 2
	mflo $t1
	j cauta_par

cauta_par:
	beqz $t1, gasit_par
	subu $t1, $t1, 1
	addiu $s0, $s0, 4
	b cauta_par

gasit_par:
	lw $t1, 0($s0)
	lw $t2, 4($s0)
	addu $v0, $t1, $t2
	j exit

main:
	subu $sp, $sp, 8
	la $t0, arr
	sw $t0, 0($sp)
	lw $t0, n
	sw $t0, 4($sp)
	#$sp: (arr)(n)
	jal procedura
	addiu $sp, $sp, 8
	ble $v0, 10, scrie_mic

scrie_mare:
	la $a0, mare
	j afiseaza

scrie_mic:
	la $a0, mic
	j afiseaza

afiseaza:
	li $v0, 4
	syscall
	li $v0, 10
	syscall

exit:
	lw $s1, -8($fp) 
	lw $s0, -4($fp)
	lw $fp, 0($fp)
	addiu $sp, $sp, 12
	jr $ra
